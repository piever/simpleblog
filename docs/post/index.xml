<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Thoughts and things</title>
    <link>https://piever.github.io/simpleblog/post/</link>
    <description>Recent content in Articles on Thoughts and things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://piever.github.io/simpleblog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sputnik project, third update</title>
      <link>https://piever.github.io/simpleblog/post/sputnik3/</link>
      <pubDate>Fri, 06 Jul 2018 00:12:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/sputnik3/</guid>
      <description>Create nestable custom widgets in Julia Since the last update I have mainly been working on tools for web app creation in Julia. The work has been on two fronts:
 on the techical side, I transitioned from using Vue.js to using Knockout.js to sync Julia values to Javascript values
 on the user facing side, I&#39;ve been working on a framework for custom widgets creation, so that using a @widget macro users can define their own custom widgets / recipes to visualize their custom types with simple code</description>
    </item>
    
    <item>
      <title>Sputnik project, second update</title>
      <link>https://piever.github.io/simpleblog/post/sputnik2/</link>
      <pubDate>Wed, 06 Jun 2018 00:12:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/sputnik2/</guid>
      <description>Building a toolkit to create web-based GUIs in Julia The last two week of my GSoC project were mostly dedicated to developing tools to build GUIs in Julia.
As most of these tools are getting released, I&#39;ll try to give an overview of how they can be used, what they can achieve and what are the current challenges.
A little bit of history Most Julia users are probably familiar with Interact, a package to add reactive sliders, togglebuttons and other widgets to Jupyter notebooks in Julia.</description>
    </item>
    
    <item>
      <title>Sputnik project, first update</title>
      <link>https://piever.github.io/simpleblog/post/sputnik1/</link>
      <pubDate>Sat, 19 May 2018 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/sputnik1/</guid>
      <description>Sputnik: a web app to look at your data This is the first of a series of blog updates about my Google Summer of Code project. I&#39;ll be working during Summer on a Julia based web app for data analysis and visualizations. So far I have the core structure and am exploring ways to make the interface more intuitive and user-friendly.
Loading the data To load the data, I&#39;m using a simple file picker dialog or a dropdown menu to choose among previously saved datasets:</description>
    </item>
    
    <item>
      <title>Manipulating data: JuliaDB</title>
      <link>https://piever.github.io/simpleblog/post/juliadb/</link>
      <pubDate>Sun, 21 Jan 2018 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/juliadb/</guid>
      <description>JuliaDB tutorial Introduction From now on I&#39;ll focus on more advanced Julia tutorials. Here I&#39;ll talk about working with data using the JuliaDB package to reproduce a well known tutorial. This tutorial is available as a Jupyter notebook here.
Getting the data The data is some example flight dataset that you can find here. Simply open the link and choose Save as from the File menu in your browser to save the data to a folder on your computer.</description>
    </item>
    
    <item>
      <title>Chapter VIII: Functions: can we make our own?</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter8/</link>
      <pubDate>Sat, 20 Jan 2018 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter8/</guid>
      <description>Functions So far we&#39;ve used many built-in functions from Julia, as well as some provided by external packages such as UnicodePlots. Julia allows us to write our own functions: before learning how to do that, let&#39;s see why that would be useful.
So far we have specialized on the Fibonacci sequence, but many other sequences are possible.
Let&#39;s try and compute a different sequence. As a reminder, this is how we computed the first 20 Fibonacci:</description>
    </item>
    
    <item>
      <title>Chapter VII: Plots and dots</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter7/</link>
      <pubDate>Fri, 19 Jan 2018 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter7/</guid>
      <description>Visualizing our results (and a trick with a dot) Plotting is not implemented in Base Julia and to visualize our results we will need to install an external package. There are many options but, as this is an introductory post, I&#39;ll focus on the simplest option: UnicodePlots. This package creates plots inside your terminal using symbols from Unicode. It is useful for quick visualizations and has a nice vintage look.</description>
    </item>
    
    <item>
      <title>Chapter VI: Arrays and the for loop</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter6/</link>
      <pubDate>Thu, 18 Jan 2018 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter6/</guid>
      <description>Storing what we have computed An inconvenience with the techniques we&#39;ve used so far to compute the Fibonacci sequence is that we&#39;ve never stored any result. Fortunately Julia provides a structure to do that, called Arrays. They are created using square brackets and separating values by commas. For example:
julia&amp;gt; v = [7, 3] 2-element Array{Int64,1}: 7 3 is a list of values, the first is 7 and the second is 3.</description>
    </item>
    
    <item>
      <title>Chapter V: Conditionals</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter5/</link>
      <pubDate>Mon, 18 Dec 2017 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter5/</guid>
      <description>Working with true and false So far we have learnt how to stop a &amp;quot;looped&amp;quot; statement from going on forever, based on a condition. Now, we&#39;ll see how to execute single statements based on a condition and apply that to our study of the Fibonacci sequence.
Conditional statements The simplest conditional statement has the form:
if condition command end meaning that command is to be executed only if condition is verified.</description>
    </item>
    
    <item>
      <title>Chapter IV: The while loop</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter4/</link>
      <pubDate>Sat, 18 Nov 2017 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter4/</guid>
      <description>Automatizing things Repeating a command many times can be extremely annoying. Luckily, Julia can help us automatize things using loops, which are a way to repeat the same command, or list of commands many times. Here we will continue on playing with Fibonacci numbers, without having to manually evaluate the same command at the console many times.
The while loop The while loop executes a statement as long as a given condition is verified.</description>
    </item>
    
    <item>
      <title>Chapter III: Variable assignment</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter3/</link>
      <pubDate>Thu, 16 Nov 2017 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter3/</guid>
      <description>Giving names to things In the previous blog post, we have found a somewhat tedious way to compute the Fibonacci sequence. We started by typing 1+1 at the console, we looked at the result, which was 2, we typed 2+1, we got 3, we typed 3+2 and so on and so forth. In this and the following post, we&#39;ll discover a less excruciatingly boring way of doing the same computation. In the process, we&#39;ll learn two key building blocks of programming: assigning values to variables and looping.</description>
    </item>
    
    <item>
      <title>Chapter II: Numbers</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter2/</link>
      <pubDate>Wed, 15 Nov 2017 00:17:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter2/</guid>
      <description>Numbers and math In the previous post we mainly played with strings, but Julia is also very good at math. In this post we will do some math in Julia.
Integer and and non integer numbers Julia accepts both integer numbers and non integer numbers (with a decimal point). All basic (and often non basic) mathematical functions are implemented in Julia. Here we will play a bit with the four basic operations (+, -, *, /), the exponentiation operator (^) and the comparison operators (&amp;gt;, ==, &amp;lt;).</description>
    </item>
    
    <item>
      <title>Chapter I: Hello, Julia</title>
      <link>https://piever.github.io/simpleblog/post/julia_chapter1/</link>
      <pubDate>Tue, 14 Nov 2017 00:17:19 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/post/julia_chapter1/</guid>
      <description>Learning how to code This is the first of a series of posts aimed about the Julia programming language. Julia is a reasonably young language designed for scientific computing. Despite being free, fast and elegantly designed, Julia is not as widely used as I think it should be. I also believe that, due to its simplicity and clarity, Julia makes for a good first programming language. In case some newcomers to programming are curious enough to give Julia a try, I&#39;m making a series of tutorials about it, starting from the very beginning.</description>
    </item>
    
  </channel>
</rss>