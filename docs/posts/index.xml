<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Thoughts and things</title>
    <link>https://piever.github.io/simpleblog/posts/</link>
    <description>Recent content in Articles on Thoughts and things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://piever.github.io/simpleblog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter VI: The for loop</title>
      <link>https://piever.github.io/simpleblog/posts/julia_chapter6/</link>
      <pubDate>Thu, 18 Jan 2018 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/posts/julia_chapter6/</guid>
      <description>For loops Draft</description>
    </item>
    
    <item>
      <title>Chapter V: Conditionals</title>
      <link>https://piever.github.io/simpleblog/posts/julia_chapter5/</link>
      <pubDate>Mon, 18 Dec 2017 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/posts/julia_chapter5/</guid>
      <description>Working with true and false So far we have learnt how to stop a &amp;ldquo;looped&amp;rdquo; statement from going on forever, based on a condition. Now, we&amp;rsquo;ll see how to execute single statements based on a condition and apply that to our study of the Fibonacci sequence.
Conditional statements The simplest conditional statement has the form:
if condition command end meaning that command is to be executed only if condition is verified.</description>
    </item>
    
    <item>
      <title>Chapter IV: The while loop</title>
      <link>https://piever.github.io/simpleblog/posts/julia_chapter4/</link>
      <pubDate>Sat, 18 Nov 2017 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/posts/julia_chapter4/</guid>
      <description>Automatizing things Repeating a command many times can be extremely annoying. Luckily, Julia can help us automatize things using loops, which are a way to repeat the same command, or list of commands many times. Here we will continue on playing with Fibonacci numbers, without having to manually evaluate the same command at the console many times.
The while loop The while loop executes a statement as long as a given condition is verified.</description>
    </item>
    
    <item>
      <title>Chapter III: Variable assignment</title>
      <link>https://piever.github.io/simpleblog/posts/julia_chapter3/</link>
      <pubDate>Wed, 15 Nov 2017 00:18:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/posts/julia_chapter3/</guid>
      <description>Giving names to things In the previous blog post, we have found a somewhat tedious way to compute the Fibonacci sequence. We started by typing 1+1 at the console, we looked at the result, which was 2, we typed 2+1, we got 3, we typed 3+2 and so on and so forth. In this and the following post, we&amp;rsquo;ll discover a less excruciatingly boring way of doing the same computation.</description>
    </item>
    
    <item>
      <title>Chapter II: Numbers</title>
      <link>https://piever.github.io/simpleblog/posts/julia_chapter2/</link>
      <pubDate>Wed, 15 Nov 2017 00:17:23 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/posts/julia_chapter2/</guid>
      <description>Numbers and math In the previous post we mainly played with strings, but Julia is also very good at math. In this post we will do some math in Julia.
Integer and and non integer numbers Julia accepts both integer numbers and non integer numbers (with a decimal point). All basic (and often non basic) mathematical functions are implemented in Julia. Here we will play a bit with the four basic operations (+, -, *, /), the exponentiation operator (^) and the comparison operators (&amp;gt;, ==, &amp;lt;).</description>
    </item>
    
    <item>
      <title>Chapter I: Hello, Julia</title>
      <link>https://piever.github.io/simpleblog/posts/julia_chapter1/</link>
      <pubDate>Tue, 14 Nov 2017 00:17:19 +0000</pubDate>
      
      <guid>https://piever.github.io/simpleblog/posts/julia_chapter1/</guid>
      <description>Learning how to code This is the first of a series of posts aimed about the Julia programming language. Julia is a reasonably young language designed for scientific computing. Despite being free, fast and elegantly designed, Julia is not as widely used as I think it should be. I also believe that, due to its simplicity and clarity, Julia makes for a good first programming language. In case some newcomers to programming are curious enough to give Julia a try, I&amp;rsquo;m making a series of tutorials about it, starting from the very beginning.</description>
    </item>
    
  </channel>
</rss>